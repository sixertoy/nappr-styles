@use 'sass:math';
@use 'sass:meta' as meta;
@use 'sass:list' as list;

$rem-px-only: true !default;
$rem-fallback: true !default;

/* ------------------------------------

SOURCE: https://github.com/pierreburel/sass-rem

------------------------------------ */
@function rem-separator($list, $separator: false) {
  @if $separator == 'comma' or $separator == 'space' {
    @return list.append($list, null, $separator);
  }

  @if meta.function-exists('list-separator') == true {
    @return list.separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();

  @each $item in $list {
    $test-list: list.append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  $div: math.div($zoom, $body-font-size);

  font-size: $div * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if meta.type-of($value) == 'number' and math.unit($value) == 'rem' and $to == 'px' {
      $div: math.div($value, 1rem);
      $result: list.append($result, $div * $rem-baseline, $separator);
    }

    @else if
      meta.type-of($value) ==
      'number' and
      math.unit($value) ==
      'px' and
      $to ==
      'rem' {
      $div: math.div($value, $rem-baseline);
      $result: list.append($result, $div * 1rem, $separator);
    }

    @else if meta.type-of($value) == 'list' {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: list.append($result, $value, $separator);
    }

    @else {
      $result: list.append($result, $value, $separator);
    }
  }

  @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

@function convert($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  }

  @else {
    @return rem-convert(rem, $values...);
  }
}



@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem.convert($property, map-get($properties, $property));
    }
  }

  @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }

      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}
